{
  
    
        "post0": {
            "title": "Nudge Your Run Pace with Music",
            "content": "You Create a Custom Playlist for Your Races? . . The year was 2009. I was training for the Chicago Half Marathon and it was still the era of having music take up physical space on your device. I would spend a good chunk of time loading up my phone with the most blood-pumping, angriest, high-energy songs I knew for my training runs. The thought was that I needed every ounce of help I could get to get through my first race longer than 10k. . A decade and a few more long distance races under my belt later, I was still at it but apps like Pandora and Spotify had changed the game when it came to music and running, or any physical activity for that matter. I had turned coordinating music with my runs it into a bit of an art. I would estimate what my pace would be, look at the course profile to figure out sections where I thought I might need a morale boost, and cater the playlist accordingly. . I Don&#39;t Have Time for That . Oh for sure! Neither should I. Which is why I set out to come up with a program that automates it. What if based on a route profile, I had something that could: . predict when and where I might go too fast or too slow | motivate me so that I&#39;m putting in the right amount of effort for my pace | acheive the former through music | . And so my final project idea was born. . My Data, literally . The data I would use is my own. In total about 100 runs totaling around 600 miles over the last 12 months, for which my Garmin recorded data about every 3-4 seconds of each run. If I didn&#39;t have a deadline, I could&#39;ve spent days looking at different trends and metrics. . The best part? If I wanted to test something out and get more data, I just laced on my shoes and went for a run: music, no music, dry podcasts, lots of little hills, one big hill, etc. There were a lot of variables to tweak. . import pandas as pd from datetime import datetime from datetime import timedelta import matplotlib.pyplot as plt import seaborn as sns sns.set_color_codes(&quot;dark&quot;) # DF to graph raw Strava data from API raw_df = pd.read_csv(&#39;activity_list.csv&#39;, index_col=0) df = raw_df.drop(&#39;athlete&#39;, axis=1) df[&#39;dt_date&#39;] = pd.to_datetime(df[&#39;start_date&#39;]) df[&#39;dt_date&#39;] = df[&#39;dt_date&#39;].apply(lambda x: x.replace(tzinfo=None)) current = datetime.now() # Filtering data to just the last 12 months ltm_df = df[df[&#39;dt_date&#39;] &gt; current - timedelta(days=382)] . . run_count = ltm_df.groupby(pd.Grouper(key=&#39;dt_date&#39;, freq=&#39;1M&#39;))[&#39;distance&#39;].count() run_dist = ltm_df.groupby(pd.Grouper(key=&#39;dt_date&#39;, freq=&#39;1M&#39;))[&#39;distance&#39;].sum() . . fig, (ax1, ax2) = plt.subplots(1,2,figsize=(15,6)) fig.suptitle(&#39;Number of Runs in LTM&#39;, fontsize=24) ax1.bar(run_count.index, run_count, width=20) ax2.bar(run_count.index, run_dist, width=20, color=&#39;orange&#39;) ax2.set_ylabel(&#39;Distance (meters)&#39;) plt.show() . . A time-series problem, sort of . Once I got all the data in the form I wanted, which included: . Extracting GPS data | Calculating different distances and elevation change between segments | Getting all data measured in the same time increments (my Garmin device takes measurements at random times) | . And this is how the data was used: . . 1) Data was fed to 2 time-series models, one to predict pace and another to predict cadence for the next 30 second segment. 2) Based on the predicted pace and how it compares to a runner&#39;s baseline pace, a decision is made as to whether to keep the music at the same bpm that corresponds to the current cadence or adjust the tempo of the music to signal that either the runner should slow down or increase effort. 3) Depending on the decision, the program communicates with the Spotify API program to queue up songs and change songs on the user&#39;s device, if necessary. . . I created a dashboard that shows a runner&#39;s progress and their actual vs. predicted cadence and pace to go along with a script that simulates the music changing as the run progresses. I&#39;ll update the articel with the link when the video is up. . My Gripe . The biggest issue I have right now is that I have to create a new model for every run. Actually, that&#39;s putting it lightly; my current algorithm creates a new model every 30 seconds. . . The first model trains for a little longer and no predictions are made for the first 3 minutes because predictions are pretty inaccurate before the model sees a certain amount of data beforehand. After the first model makes its prediction, it&#39;s tossed and a new one is made using the initial training data, plus the real-time data coming in for the segment for which the prediction was made. This newly trained model makes the prediction for the next time interval. This cycle continues until the end of the run. . My next question was: How can I leverage my data across multiple runs so that I don&#39;t have to train a model for as long in the beginning? Further, how can I use the variables across different runs to make better forecasts? Ambient temperature is one of the primary factors because there&#39;s nothing more grueling that going on a run in 90 degree weather. . It turns out this is a lot harder than anticipated so I&#39;m saving it for the next phase (Sequence-to-Sequence Modeling of Time Series): https://jeddy92.github.io/JEddy92.github.io/ts_seq2seq_intro/ . Other Add Ons . When I was testing this on myself, it wasn&#39;t only the tempo of the music that changed my effort. Different audio features and genre of music also affected my effort and I&#39;m speculating these different audio features affect different runners in different ways. I smell an unsupervised, clustering problem in the future. . I also want to throw in heart rate predictions to see if I can create a feature to use music to keep a person in specific cardio zones. . Thanks for reading! Hit me up if you want to talk running, data, or both! .",
            "url": "https://brokengrappler.github.io/my-blog/jupyter/2020/09/16/Nudge_Run_Pace_with_Music.html",
            "relUrl": "/jupyter/2020/09/16/Nudge_Run_Pace_with_Music.html",
            "date": " • Sep 16, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Classifier Model to Predict PONV",
            "content": "Background . &quot;I thought you just finished your first project? What&#39;re you stressing about?&quot; my wife asked at dinner. Little did she know that I felt unbelievable pressure to come up with a meaningful topic since I had selected a trivial one for the first of my four bootcamp projects. I tried to play it cool though and casually threw the ball back in her court. &quot;Yeah, I&#39;m thinking ahead to my next project. Is there anything at work where predictive analytics might help?&quot; . My wife, who works in the medical field, started listing off the common medical classification problems you typically see on Kaggle. I was on a different wave length though. Being on a Freakonomics podcast kick, I wanted to solve a problem that was under the radar; something on a smaller scale that people overlooked but if solved, could result in substantial change for the better. . My next question would lead to my project 3 topic. &quot;Hey, you seem to talk with your patients a lot about nausea. What&#39;s that all about?&quot; . Learning Medicine via Wikipedia . Post Operative Nausea and Vomiting (PONV) is the phenomenon of nausea, vomiting, or retching experienced by a patient in the postanesthesia care unit (PACU) or within 24 hours following a surgical procedure. The average incidence of PONV after general anesthesia is about 30% in all post-surgical patients but up to 80% in high-risk patients 1. . Anesthesiologists are the primary doctors who . . Did I just perform ETL? . Grab csv files from a research paper written at a University in Sao Paulo | Clean NaN values, values that didn&#39;t make sense, columns with substantial data missing, etc. | Set up an EC/2 server with postgres and load the data | Create a few sub-tables (one for the different anesthetic drugs, another for the antiemetic drugs) | . Never Tell Me the Odds... From a Tree . Incremental Gain . 1. Choi SU. Is postoperative nausea and vomiting still the big &quot;little&quot; problem?. Korean J Anesthesiol. 2016;69(1):1-2. doi:10.4097/kjae.2016.69.1.1↩ .",
            "url": "https://brokengrappler.github.io/my-blog/jupyter/2020/09/13/PONV-Predictor.html",
            "relUrl": "/jupyter/2020/09/13/PONV-Predictor.html",
            "date": " • Sep 13, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". I&rsquo;m an electrical engineer by education and financial analyst by profession. After several years of working with MS Excel and getting more proficient with writing VBA scripts, I wanted to take my coding and data analysis to the next level. A transition into data science seemed like the logical next step in my career. While I worked in the real estate private equity industry for most of my career, I have a natural curiosity for behavioral psychology and love reading books and listening to podcasts on the subject. . When I&rsquo;m not working on becoming a better data scientist, you&rsquo;ll find me on the mats or running on the trails. . Here are links to my social media profiles: . Platform URL . Linkedin: | https://www.linkedin.com/in/paul-j-chung/ | . GitHub: | https://github.com/brokengrappler | . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://brokengrappler.github.io/my-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://brokengrappler.github.io/my-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}